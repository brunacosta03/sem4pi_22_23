@startuml
'http://plantuml.com/skinparam.html
skinparam handwritten true
skinparam monochrome true
skinparam packageStyle rect
skinparam defaultFontName FG Virgil
skinparam shadowing false


class CreateBoardUI <<presentation>>
class CreateBoardController <<application>>
class BoardEntryFactory <<factory>>
class BoardEntry <<domain>>
class AuthorizationService <<service>>
class UserSession
class BoardService <<service>>
class BoardFactory <<factory>>
class BoardPermissionFactory <<factory>>
class BoardPermission <<domain>>
class Board <<domain>>
class PersistenceContext <<persistence>>
class RepositoryFactory <<factory>>
class BoardRepository <<repository>>


CreateBoardUI --> CreateBoardController: theController
CreateBoardController --> BoardEntryFactory: boardEntryFactory
CreateBoardController --> AuthorizationService: authz
CreateBoardController --> BoardService: boardSvc
BoardEntryFactory --> BoardEntry
AuthorizationService --> UserSession: session
BoardService --> PersistenceContext : persistence
PersistenceContext --> RepositoryFactory : factory
BoardService -> BoardFactory: boardFactory
BoardService -> BoardPermissionFactory: boardPerFactory
BoardService -> Board: board
BoardService -> BoardRepository: boardRepository
RepositoryFactory -> BoardRepository: boardRepository
BoardFactory -> Board: board
BoardPermissionFactory -> BoardPermission: boardPermission



CreateBoardUI : doShow()
CreateBoardController : createEntry(String, String, String, String)
BoardEntryFactory : createEntry(String, String, String, String)
BoardEntry : createEntry(BoardRow, BoardCol, EntryTitle, EntryNumber)
CreateBoardController : createBoard(String, String, String, List<BoardEntry>)
AuthorizationService : ensureAuthenticatedUserHasAnyOf(Role...)
AuthorizationService : session()
UserSession : authenticatedUser()
BoardService : createBoard(String, String, String, List<BoardEntry>, User)
PersistenceContext : repositories()
RepositoryFactory : boards()
BoardFactory : create(String, String, String, List<BoardEntry>, User, boolean)
Board : Board(BoardTitle, BoardNRow, BoardNCol, List<BoardEntry>, User, boolean)
BoardPermissionFactory : create(User, AccessType)
BoardPermission : BoardPermission(User, AccessType)
Board : addPermission(BoardPermission)
BoardRepository : save(Board)

@enduml